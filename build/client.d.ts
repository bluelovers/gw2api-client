import fetch from 'lets-fetch';
import * as endpoints from './endpoints';
export declare type vLang = 'en' | 'es' | 'de' | 'fr' | 'ko' | 'zh';
export declare type vApiKey = false | string;
export interface IClient {
    lang: vLang;
    apiKey: vApiKey;
    fetch: fetch;
    caches: any[];
}
export declare class Client implements IClient {
    lang: vLang;
    apiKey: vApiKey;
    fetch: any;
    caches: {
        get: () => Promise<any>;
        set: () => Promise<boolean>;
        mget: (keys: any) => Promise<any>;
        mset: () => Promise<boolean>;
        flush: () => Promise<boolean>;
    }[];
    constructor();
    language(lang: vLang): this;
    authenticate(apiKey: vApiKey): this;
    cacheStorage(caches: any): this;
    flushCacheIfGameUpdated(): any;
    account(): endpoints.AccountEndpoint;
    achievements(): endpoints.AchievementsEndpoint;
    backstory(): endpoints.BackstoryEndpoint;
    build(): endpoints.BuildEndpoint;
    cats(): endpoints.CatsEndpoint;
    characters(name: string): endpoints.CharactersEndpoint;
    colors(): endpoints.ColorsEndpoint;
    commerce(): endpoints.CommerceEndpoint;
    continents(): endpoints.ContinentsEndpoint;
    currencies(): endpoints.CurrenciesEndpoint;
    dungeons(): endpoints.DungeonsEndpoint;
    emblem(): endpoints.EmblemEndpoint;
    events(): endpoints.EventsEndpoint;
    files(): endpoints.FilesEndpoint;
    finishers(): endpoints.FinishersEndpoint;
    gliders(): endpoints.GlidersEndpoint;
    guild(id: any): endpoints.GuildEndpoint;
    items(): endpoints.ItemsEndpoint;
    itemstats(): endpoints.ItemstatsEndpoint;
    legends(): endpoints.LegendsEndpoint;
    mailcarriers(): endpoints.MailcarriersEndpoint;
    maps(): endpoints.MapsEndpoint;
    masteries(): endpoints.MasteriesEndpoint;
    materials(): endpoints.MaterialsEndpoint;
    minis(): endpoints.MinisEndpoint;
    nodes(): endpoints.NodesEndpoint;
    outfits(): endpoints.OutfitsEndpoint;
    pets(): endpoints.PetsEndpoint;
    professions(): endpoints.ProfessionsEndpoint;
    pvp(): endpoints.PvpEndpoint;
    quaggans(): endpoints.QuaggansEndpoint;
    races(): endpoints.RacesEndpoint;
    raids(): endpoints.RaidsEndpoint;
    recipes(): endpoints.RecipesEndpoint;
    skills(): endpoints.SkillsEndpoint;
    skins(): endpoints.SkinsEndpoint;
    specializations(): endpoints.SpecializationsEndpoint;
    stories(): endpoints.StoriesEndpoint;
    titles(): endpoints.TitlesEndpoint;
    tokeninfo(): endpoints.TokeninfoEndpoint;
    traits(): endpoints.TraitsEndpoint;
    worlds(): endpoints.WorldsEndpoint;
    wvw(): endpoints.WvwEndpoint;
}
export default Client;
